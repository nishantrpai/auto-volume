{"version":3,"file":"contentScript.js","mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,IAAI,8CAA8C,IAAI;AACrF,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC,E","sources":["webpack://thread2audio/./src/contentScript.js"],"sourcesContent":["// Content script file will run in the context of web page.\n// With content script you can manipulate the web pages using\n// Document Object Model (DOM).\n// You can also pass information to the parent extension.\n\n// We execute this script by making an entry in manifest.json file\n// under `content_scripts` property\n\n// For more information on Content Scripts,\n// See https://developer.chrome.com/extensions/content_scripts\n\n// Log `title` of current active web page\nconsole.log(\"Content script loaded for xlinks\");\n\n// @ts-ignore\nlet windowurl = window.location.href;\nlet isProcessing = false;\n\nconst replaceSpacedLinks = (text) => {\n  console.log(\"Replacing spaced links\");\n  const domainRegex = /(?<!\\S)([a-zA-Z0-9-]+(?:\\s*\\.\\s*[a-zA-Z0-9-]+)+(?:\\s*\\/\\s*[a-zA-Z0-9-]+)*)\\b/g;\n  return text.replace(domainRegex, (match, p1, offset, string) => {\n    // Check if the match is already part of a link\n    const beforeMatch = string.substring(0, offset);\n    const afterMatch = string.substring(offset + match.length);\n    if (beforeMatch.lastIndexOf('<a') > beforeMatch.lastIndexOf('</a') ||\n        afterMatch.indexOf('</a') < afterMatch.indexOf('<a')) {\n      // If it's part of an existing link, return the original match\n      return match;\n    }\n    const url = match.replace(/\\s+/g, '');\n    console.log(\"Replaced link:\", match, \"with:\", url);\n    return `<a href=\"https://${url}\" target=\"_blank\" rel=\"noopener noreferrer\">${url}</a>`;\n  });\n};\n\nconst renderTweet = (tweetElement) => {\n  if (tweetElement instanceof HTMLElement && !tweetElement.dataset.processed) {\n    const tweetText = tweetElement.querySelector('[data-testid=\"tweetText\"]');\n    const tweetImage = tweetElement.querySelector('[data-testid=\"tweetPhoto\"]');\n\n    if (tweetText) {\n      const originalText = tweetText.innerHTML || '';\n      const replacedText = replaceSpacedLinks(originalText);\n      tweetText.innerHTML = replacedText;\n    }\n\n    if (tweetImage && tweetImage instanceof HTMLElement) {\n      tweetImage.style.display = 'block';\n    }\n\n    tweetElement.dataset.processed = 'true';\n  }\n};\n\nconst main = () => {\n  if (isProcessing) return;\n  isProcessing = true;\n  console.log(\"Main function called\");\n\n  const tweets = document.querySelectorAll('[data-testid=\"tweet\"]');\n  for (const tweet of tweets) {\n    console.log(\"Processing tweet\", tweet);\n    renderTweet(tweet);\n  }\n\n  console.log(\"Tweets processed\");\n  isProcessing = false;\n};\n\nconst checkMutations = () => {\n  console.log(\"Setting up mutation observer\");\n  let observer = new MutationObserver((mutations, observer) => {\n    const tweets = document.querySelectorAll('[data-testid=\"tweet\"]');\n    if (tweets.length > 0) {\n      const visibleTweets = Array.from(tweets).filter(tweet => {\n        const rect = tweet.getBoundingClientRect();\n        return rect.top >= 0 && rect.bottom <= window.innerHeight;\n      });\n      \n      if (visibleTweets.length > 0) {\n        console.log(\"Visible tweets detected, calling main function\");\n        main();\n      }\n    }\n  });\n\n  observer.observe(document.body, {\n    subtree: true,\n    childList: true,\n    attributes: false\n  });\n};\n\ncheckMutations();\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  console.log(\"DOM loaded\");\n  main();\n});\n\nwindow.addEventListener('popstate', () => {\n  console.log(\"Route changed\");\n  main();\n});\n\nwindow.addEventListener(\"click\", () => {\n  requestAnimationFrame(() => {\n    if (windowurl !== window.location.href) {\n      console.log(\"URL changed\");\n      windowurl = window.location.href;\n      main();\n    }\n  });\n}, true);\n\nwindow.addEventListener('beforeunload', () => {\n  console.log(\"Page unloading\");\n});\n\nwindow.addEventListener('hashchange', () => {\n  console.log(\"Hash changed\");\n  main();\n});"],"names":[],"sourceRoot":""}